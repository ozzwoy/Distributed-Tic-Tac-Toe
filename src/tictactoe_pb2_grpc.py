# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tictactoe_pb2 as tictactoe__pb2


class TicTacToeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartElection = channel.unary_unary(
                '/TicTacToe/StartElection',
                request_serializer=tictactoe__pb2.ElectionMessage.SerializeToString,
                response_deserializer=tictactoe__pb2.ElectionResponse.FromString,
                )
        self.ReportLeader = channel.unary_unary(
                '/TicTacToe/ReportLeader',
                request_serializer=tictactoe__pb2.LeaderMessage.SerializeToString,
                response_deserializer=tictactoe__pb2.LeaderResponse.FromString,
                )
        self.GetTime = channel.unary_unary(
                '/TicTacToe/GetTime',
                request_serializer=tictactoe__pb2.TimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.TimeResponse.FromString,
                )
        self.SynchTime = channel.unary_unary(
                '/TicTacToe/SynchTime',
                request_serializer=tictactoe__pb2.TimeSynchRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.TimeSynchResponse.FromString,
                )


class TicTacToeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartElection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynchTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TicTacToeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartElection': grpc.unary_unary_rpc_method_handler(
                    servicer.StartElection,
                    request_deserializer=tictactoe__pb2.ElectionMessage.FromString,
                    response_serializer=tictactoe__pb2.ElectionResponse.SerializeToString,
            ),
            'ReportLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportLeader,
                    request_deserializer=tictactoe__pb2.LeaderMessage.FromString,
                    response_serializer=tictactoe__pb2.LeaderResponse.SerializeToString,
            ),
            'GetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTime,
                    request_deserializer=tictactoe__pb2.TimeRequest.FromString,
                    response_serializer=tictactoe__pb2.TimeResponse.SerializeToString,
            ),
            'SynchTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SynchTime,
                    request_deserializer=tictactoe__pb2.TimeSynchRequest.FromString,
                    response_serializer=tictactoe__pb2.TimeSynchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TicTacToe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TicTacToe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartElection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/StartElection',
            tictactoe__pb2.ElectionMessage.SerializeToString,
            tictactoe__pb2.ElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/ReportLeader',
            tictactoe__pb2.LeaderMessage.SerializeToString,
            tictactoe__pb2.LeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/GetTime',
            tictactoe__pb2.TimeRequest.SerializeToString,
            tictactoe__pb2.TimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynchTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/SynchTime',
            tictactoe__pb2.TimeSynchRequest.SerializeToString,
            tictactoe__pb2.TimeSynchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
